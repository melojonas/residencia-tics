{"version":3,"file":"style-to-js.min.js","sources":["../node_modules/inline-style-parser/index.js","../node_modules/style-to-object/cjs/index.js","../node_modules/style-to-object/esm/index.mjs","../src/utilities.ts","../src/index.ts"],"sourcesContent":["// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar inline_style_parser_1 = __importDefault(require(\"inline-style-parser\"));\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nfunction StyleToObject(style, iterator) {\n    var styleObject = null;\n    if (!style || typeof style !== 'string') {\n        return styleObject;\n    }\n    var declarations = (0, inline_style_parser_1.default)(style);\n    var hasIterator = typeof iterator === 'function';\n    declarations.forEach(function (declaration) {\n        if (declaration.type !== 'declaration') {\n            return;\n        }\n        var property = declaration.property, value = declaration.value;\n        if (hasIterator) {\n            iterator(property, value, declaration);\n        }\n        else if (value) {\n            styleObject = styleObject || {};\n            styleObject[property] = value;\n        }\n    });\n    return styleObject;\n}\nexports.default = StyleToObject;\n//# sourceMappingURL=index.js.map","import StyleToObject from '../cjs/index.js';\n\nexport default StyleToObject.default;\n","const CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9-]+$/;\nconst HYPHEN_REGEX = /-([a-z])/g;\nconst NO_HYPHEN_REGEX = /^[^-]+$/;\nconst VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\nconst MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\n\n/**\n * Checks whether to skip camelCase.\n */\nconst skipCamelCase = (property: string) =>\n  !property ||\n  NO_HYPHEN_REGEX.test(property) ||\n  CUSTOM_PROPERTY_REGEX.test(property);\n\n/**\n * Replacer that capitalizes first character.\n */\nconst capitalize = (match: string, character: string) =>\n  character.toUpperCase();\n\n/**\n * Replacer that removes beginning hyphen of vendor prefix property.\n */\nconst trimHyphen = (match: string, prefix: string) => `${prefix}-`;\n\n/**\n * CamelCase options.\n */\nexport interface CamelCaseOptions {\n  reactCompat?: boolean;\n}\n\n/**\n * CamelCases a CSS property.\n */\nexport const camelCase = (property: string, options: CamelCaseOptions = {}) => {\n  if (skipCamelCase(property)) {\n    return property;\n  }\n\n  property = property.toLowerCase();\n\n  if (options.reactCompat) {\n    // `-ms` vendor prefix should not be capitalized\n    property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\n  } else {\n    // for non-React, remove first hyphen so vendor prefix is not capitalized\n    property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\n  }\n\n  return property.replace(HYPHEN_REGEX, capitalize);\n};\n","import StyleToObject from 'style-to-object';\nimport { camelCase, CamelCaseOptions } from './utilities';\n\ntype StyleObject = Record<string, string>;\n\ninterface StyleToJSOptions extends CamelCaseOptions {}\n\n/**\n * Parses CSS inline style to JavaScript object (camelCased).\n */\nexport default function StyleToJS(\n  style: string,\n  options?: StyleToJSOptions,\n): StyleObject {\n  const output: StyleObject = {};\n\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  StyleToObject(style, (property, value) => {\n    // skip CSS comment\n    if (property && value) {\n      output[camelCase(property, options)] = value;\n    }\n  });\n\n  return output;\n}\n"],"names":["COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","__importDefault","this","mod","__esModule","default","Object","defineProperty","cjs","value","inline_style_parser_1","style","options","TypeError","lineno","column","updatePosition","lines","match","length","i","lastIndexOf","position","start","line","node","Position","whitespace","end","source","error","msg","err","Error","reason","filename","silent","re","m","exec","slice","comments","rules","c","comment","push","pos","charAt","type","declaration","prop","val","ret","property","prototype","content","decl","decls","declarations","StyleToObject","iterator","styleObject","hasIterator","forEach","CUSTOM_PROPERTY_REGEX","HYPHEN_REGEX","NO_HYPHEN_REGEX","VENDOR_PREFIX_REGEX","MS_VENDOR_PREFIX_REGEX","capitalize","character","toUpperCase","trimHyphen","prefix","concat","camelCase","test","skipCamelCase","toLowerCase","reactCompat","output"],"mappings":"oYAEIA,EAAgB,kCAEhBC,EAAgB,MAChBC,EAAmB,OAGnBC,EAAiB,yCACjBC,EAAc,QACdC,EAAc,uDACdC,EAAkB,UAGlBC,EAAa,aAMbC,EAAe,GA8OnB,SAASC,EAAKC,GACZ,OAAOA,EAAMA,EAAIC,QAAQJ,EAAYC,GAAgBA,CACvD,CCnQA,IAAII,EAAmBC,GAAQA,EAAKD,iBAAoB,SAAUE,GAC9D,OAAQA,GAAOA,EAAIC,WAAcD,EAAM,CAAEE,QAAWF,EACxD,EACAG,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,IAAIC,EAAwBT,GD4BX,SAAUU,EAAOC,GAChC,GAAqB,iBAAVD,EACT,MAAM,IAAIE,UAAU,mCAGtB,IAAKF,EAAO,MAAO,GAEnBC,EAAUA,GAAW,GAKrB,IAAIE,EAAS,EACTC,EAAS,EAOb,SAASC,EAAejB,GACtB,IAAIkB,EAAQlB,EAAImB,MAAM5B,GAClB2B,IAAOH,GAAUG,EAAME,QAC3B,IAAIC,EAAIrB,EAAIsB,YAvCF,MAwCVN,GAAUK,EAAIrB,EAAIoB,OAASC,EAAIL,EAAShB,EAAIoB,MAC7C,CAOD,SAASG,IACP,IAAIC,EAAQ,CAAEC,KAAMV,EAAQC,OAAQA,GACpC,OAAO,SAAUU,GAGf,OAFAA,EAAKH,SAAW,IAAII,EAASH,GAC7BI,IACOF,CACb,CACG,CAUD,SAASC,EAASH,GAChBrB,KAAKqB,MAAQA,EACbrB,KAAK0B,IAAM,CAAEJ,KAAMV,EAAQC,OAAQA,GACnCb,KAAK2B,OAASjB,EAAQiB,MACvB,CAeD,SAASC,EAAMC,GACb,IAAIC,EAAM,IAAIC,MACZrB,EAAQiB,OAAS,IAAMf,EAAS,IAAMC,EAAS,KAAOgB,GAQxD,GANAC,EAAIE,OAASH,EACbC,EAAIG,SAAWvB,EAAQiB,OACvBG,EAAIR,KAAOV,EACXkB,EAAIjB,OAASA,EACbiB,EAAIH,OAASlB,GAETC,EAAQwB,OAGV,MAAMJ,CAET,CAQD,SAASd,EAAMmB,GACb,IAAIC,EAAID,EAAGE,KAAK5B,GAChB,GAAK2B,EAAL,CACA,IAAIvC,EAAMuC,EAAE,GAGZ,OAFAtB,EAAejB,GACfY,EAAQA,EAAM6B,MAAMzC,EAAIoB,QACjBmB,CAJQ,CAKhB,CAKD,SAASX,IACPT,EAAM3B,EACP,CAQD,SAASkD,EAASC,GAChB,IAAIC,EAEJ,IADAD,EAAQA,GAAS,GACTC,EAAIC,MACA,IAAND,GACFD,EAAMG,KAAKF,GAGf,OAAOD,CACR,CAQD,SAASE,IACP,IAAIE,EAAMxB,IACV,GAnJgB,KAmJKX,EAAMoC,OAAO,IAlJvB,KAkJyCpC,EAAMoC,OAAO,GAAjE,CAGA,IADA,IAAI3B,EAAI,EAENvB,GAAgBc,EAAMoC,OAAO3B,KAtJpB,KAuJIT,EAAMoC,OAAO3B,IAxJZ,KAwJmCT,EAAMoC,OAAO3B,EAAI,OAEhEA,EAIJ,GAFAA,GAAK,EAEDvB,IAAiBc,EAAMoC,OAAO3B,EAAI,GACpC,OAAOU,EAAM,0BAGf,IAAI/B,EAAMY,EAAM6B,MAAM,EAAGpB,EAAI,GAM7B,OALAL,GAAU,EACVC,EAAejB,GACfY,EAAQA,EAAM6B,MAAMpB,GACpBL,GAAU,EAEH+B,EAAI,CACTE,KApKa,UAqKbJ,QAAS7C,GAvBiE,CAyB7E,CAQD,SAASkD,IACP,IAAIH,EAAMxB,IAGN4B,EAAOhC,EAAM1B,GACjB,GAAK0D,EAAL,CAIA,GAHAN,KAGK1B,EAAMzB,GAAc,OAAOqC,EAAM,wBAGtC,IAAIqB,EAAMjC,EAAMxB,GAEZ0D,EAAMN,EAAI,CACZE,KA7LiB,cA8LjBK,SAAUvD,EAAKoD,EAAK,GAAGlD,QAAQX,EAAeQ,IAC9CY,MAAO0C,EACHrD,EAAKqD,EAAI,GAAGnD,QAAQX,EAAeQ,IACnCA,IAMN,OAFAqB,EAAMvB,GAECyD,CApBW,CAqBnB,CAyBD,OA9JA1B,EAAS4B,UAAUC,QAAU5C,EA6J7BgB,IAjBA,WACE,IAKI6B,EALAC,EAAQ,GAMZ,IAJAhB,EAASgB,GAIDD,EAAOP,MACA,IAATO,IACFC,EAAMZ,KAAKW,GACXf,EAASgB,IAIb,OAAOA,CACR,CAGMC,EACT,IChNA,ICxCeC,GDwCAnD,EAAAH,QAtBf,SAAuBM,EAAOiD,GAC1B,IAAIC,EAAc,KAClB,IAAKlD,GAA0B,iBAAVA,EACjB,OAAOkD,EAEX,IAAIH,GAAe,EAAIhD,EAAsBL,SAASM,GAClDmD,EAAkC,mBAAbF,EAczB,OAbAF,EAAaK,SAAQ,SAAUd,GAC3B,GAAyB,gBAArBA,EAAYD,KAAhB,CAGA,IAAIK,EAAWJ,EAAYI,SAAU5C,EAAQwC,EAAYxC,MACrDqD,EACAF,EAASP,EAAU5C,EAAOwC,GAErBxC,KACLoD,EAAcA,GAAe,IACjBR,GAAY5C,EAP3B,CAST,IACWoD,CACX,GCvC6BxD,QCFvB2D,EAAwB,oBACxBC,EAAe,YACfC,EAAkB,UAClBC,EAAsB,6BACtBC,EAAyB,UAazBC,EAAa,SAACnD,EAAeoD,GACjC,OAAAA,EAAUC,aAAV,EAKIC,EAAa,SAACtD,EAAeuD,GAAmB,MAAA,GAAGC,OAAAD,EAAS,MAYrDE,EAAY,SAACtB,EAAkBzC,GAC1C,YAD0C,IAAAA,IAAAA,EAA8B,CAAA,GA1BpD,SAACyC,GACrB,OAACA,GACDa,EAAgBU,KAAKvB,IACrBW,EAAsBY,KAAKvB,EAF3B,CA0BIwB,CAAcxB,GACTA,GAGTA,EAAWA,EAASyB,eAIlBzB,EAFEzC,EAAQmE,YAEC1B,EAASrD,QAAQoE,EAAwBI,GAGzCnB,EAASrD,QAAQmE,EAAqBK,IAGnCxE,QAAQiE,EAAcI,GACxC,SCzCc,SACZ1D,EACAC,GAEA,IAAMoE,EAAsB,CAAA,EAE5B,OAAKrE,GAA0B,iBAAVA,GAIrBgD,EAAchD,GAAO,SAAC0C,EAAU5C,GAE1B4C,GAAY5C,IACduE,EAAOL,EAAUtB,EAAUzC,IAAYH,EAE3C,IAEOuE,GAVEA,CAWX"}